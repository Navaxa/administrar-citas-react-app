{"version":3,"sources":["components/Cita.js","components/Formulario.js","App.js","reportWebVitals.js","index.js"],"names":["Cita","cita","eliminarCita","className","mascota","propietario","fecha","hora","sintomas","type","onClick","id","Formulario","crearCita","dataForm","useState","citas","setCitas","error","setError","handleChange","e","target","name","value","onSubmit","preventDefault","trim","uuid","placeholder","onChange","App","citasIniciales","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","nuevasCitas","filter","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAyBeA,EAtBF,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,aAAR,OACL,sBAAKC,UAAU,OAAf,UACI,0CAAY,+BAAOF,EAAKG,UAAxB,OACA,kDAAoB,+BAAOH,EAAKI,cAAhC,OACA,wCAAU,+BAAOJ,EAAKK,QAAtB,OACA,uCAAS,+BAAOL,EAAKM,OAArB,OACA,2CAAa,+BAAON,EAAKO,WAAzB,OAEA,wBAAQC,KAAK,SACLN,UAAU,+BACVO,QAAS,kBAAMR,EAAaD,EAAKU,KAFzC,0B,8BCwGGC,EA/GI,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAEXC,EAAW,CACbV,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,IAGd,EAA0BO,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KAEA,EAA0BF,oBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAe,SAACC,GAClBJ,EAAS,2BACFD,GADC,kBAEHK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAI1BpB,EAAgDY,EAAhDZ,QAASC,EAAuCW,EAAvCX,YAAaC,EAA0BU,EAA1BV,MAAOC,EAAmBS,EAAnBT,KAAMC,EAAaQ,EAAbR,SAwB3C,OACI,qCACI,4CACCU,EAAQ,mBAAGf,UAAU,eAAb,+CAAoE,KAC7E,uBAAMsB,SA1BK,SAACJ,GAChBA,EAAEK,iBAGqB,KAAnBtB,EAAQuB,QAAwC,KAAvBtB,EAAYsB,QAAkC,KAAjBrB,EAAMqB,QAAiC,KAAhBpB,EAAKoB,QAAqC,KAApBnB,EAASmB,QAKhHR,GAAS,GAGTH,EAAML,GAAKiB,MACXZ,EAAMR,SAAWQ,EAAMR,SAASmB,OAGhCd,EAAUG,GAGVC,EAASH,IAdLK,GAAS,IAqBT,UACI,mDACA,uBAAOV,KAAK,OACRc,KAAK,UACLpB,UAAU,eACV0B,YAAY,uBACZC,SAAUV,EACVI,MAAOpB,IAIX,0DACA,uBAAOK,KAAK,OACRc,KAAK,cACLpB,UAAU,eACV0B,YAAY,wBACZC,SAAUV,EACVI,MAAOnB,IAIX,mDACA,uBAAOI,KAAK,OACRc,KAAK,QACLpB,UAAU,eACV2B,SAAUV,EACVI,MAAOlB,IAIX,mDACA,uBAAOG,KAAK,OACRc,KAAK,OACLpB,UAAU,eACV2B,SAAUV,EACVI,MAAOjB,IAIX,6CACA,0BAAUgB,KAAK,WACXpB,UAAU,eACV2B,SAAUV,EACVI,MAAOhB,IAIX,wBAAQC,KAAK,SACTN,UAAU,8BADd,2BC5CD4B,MApDf,WAGE,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,UAChDJ,IACHA,EAAiB,IAGnB,MAA0BjB,mBAASiB,GAAnC,mBAAOhB,EAAP,KAAcC,EAAd,KAGAoB,qBAAW,WACYJ,KAAKC,MAAMC,aAAaC,QAAQ,UAEnDD,aAAaG,QAAQ,QAASL,KAAKM,UAAUvB,IAE7CmB,aAAaG,QAAQ,QAASL,KAAKM,UAAU,OAE9C,CAACvB,IAEJ,IAIMd,EAAe,SAACS,GACpB,IAAM6B,EAAcxB,EAAMyB,QAAO,SAAAxC,GAAI,OAAIA,EAAKU,KAAOA,KACrDM,EAASuB,IAGX,OACE,qCACE,4DACA,qBAAKrC,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,EAAD,CAAYU,UAfJ,SAAAZ,GAChBgB,EAAS,GAAD,mBAAMD,GAAN,CAAaf,UAgBf,sBAAKE,UAAU,kBAAf,UACGa,EAAM0B,OAAS,sDAAgC,kDAC/C1B,EAAM2B,KAAI,SAAA1C,GAAI,OACb,cAAC,EAAD,CACMA,KAAMA,EACNC,aAAcA,GAFTD,EAAKU,mBChCfiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.49fc3766.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n        <div className=\"cita\">\r\n            <p>Mascota: <span>{cita.mascota}</span> </p>\r\n            <p>Rrespresentante: <span>{cita.propietario}</span> </p>\r\n            <p>Fecha: <span>{cita.fecha}</span> </p>\r\n            <p>Hola: <span>{cita.hora}</span> </p>\r\n            <p>Sintomas: <span>{cita.sintomas}</span> </p>\r\n\r\n            <button type=\"submit\"\r\n                    className=\"u-full-width button eliminar\"  \r\n                    onClick={() => eliminarCita(cita.id)}  \r\n            >\r\n                Atendido\r\n            </button>\r\n        </div>\r\n    );\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React, { useState } from 'react';\r\nimport uuid from 'uuid/dist/v4';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    const dataForm = {\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    }\r\n\r\n    const [citas, setCitas] = useState(dataForm);\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    const handleChange = (e) => {\r\n        setCitas({\r\n            ...citas,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const { mascota, propietario, fecha, hora, sintomas } = citas;\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Validar campos\r\n        if (mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\r\n            setError(true);\r\n            return;\r\n        }\r\n\r\n        setError(false);\r\n        \r\n        // Asignar id\r\n        citas.id = uuid();\r\n        citas.sintomas = citas.sintomas.trim();\r\n\r\n        // Crear cita\r\n        crearCita(citas);\r\n\r\n        // Reiniciar el formularo\r\n        setCitas(dataForm);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Crear cita</h2>\r\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null }\r\n            <form onSubmit={submitForm} >\r\n                <label>Nombre mascota</label>\r\n                <input type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre de la mascota\"\r\n                    onChange={handleChange}\r\n                    value={mascota}\r\n                >\r\n                </input>\r\n\r\n                <label>Nombre respresentante</label>\r\n                <input type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre respresentante\"\r\n                    onChange={handleChange}\r\n                    value={propietario}\r\n                >\r\n                </input>\r\n\r\n                <label>Nombre mascota</label>\r\n                <input type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={fecha}\r\n                >\r\n                </input>\r\n\r\n                <label>Nombre mascota</label>\r\n                <input type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={hora}\r\n                >\r\n                </input>\r\n\r\n                <label>Sintomas</label>\r\n                <textarea name=\"sintomas\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={sintomas}\r\n                >\r\n                </textarea>\r\n\r\n                <button type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >\r\n                    Enviar\r\n                </button>\r\n\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import { useState, useEffect } from 'react';\nimport Cita from './components/Cita';\nimport Formulario from \"./components/Formulario\";\n\nfunction App() {\n\n  // Citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  const [citas, setCitas] = useState(citasIniciales);\n\n  // Realizar operaciones cuando el state cabia\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas]);\n\n  const crearCita = cita => {\n    setCitas([ ...citas, cita]);\n  }\n\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    setCitas(nuevasCitas);\n  }\n\n  return (\n    <>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            {citas.length ? <h2>Administra tus citas</h2> : <h2>Aun no hay citas</h2> }\n            {citas.map(cita => (\n              <Cita key={cita.id} \n                    cita={cita}\n                    eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}